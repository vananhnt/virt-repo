#include "HelloJNIImpl.h"

#include <memory>
#include <functional>
#include <iostream>
#include <cstring>
#include <stdlib.h>
#include <unistd.h>
#include <limits.h>
#include <jni.h>
#include <sys/time.h>
#include <string.h>
#include <math.h>
#include<sys/socket.h>
#include<arpa/inet.h>	//inet_addr
#include <stdint.h>
#include "HelloJNI.h"   // auto-generated by `javah HelloJNI`

#define MOD 1000000007

using std::string;
using std::function;
using std::unique_ptr;
using std::shared_ptr;
using std::cout;
using std::endl;


// leftrotate function definition
#define LEFTROTATE(x, c) (((x) << (c)) | ((x) >> (32 - (c))))


class jstring_deleter
{
    JNIEnv *m_env;
    jstring m_jstr;

public:

    jstring_deleter(JNIEnv *env, jstring jstr)
        : m_env(env)
        , m_jstr(jstr)
    {
    }

    void operator()(const char *cstr)
    {
        cout << "[DEBUG] Releasing " << cstr << endl;
        m_env->ReleaseStringUTFChars(m_jstr, cstr);
    }

};

const string ToString(JNIEnv *env, jstring jstr)
{
    jstring_deleter deleter(env, jstr);     // using a function object
    unique_ptr<const char, jstring_deleter> pcstr(
            env->GetStringUTFChars(jstr, JNI_FALSE),
            deleter );

    return string( pcstr.get() );
}


shared_ptr<const char> ToStringPtr(JNIEnv *env, jstring jstr)
{
    function<void(const char*)> deleter =   // using a lambda
        [env, jstr](const char *cstr) -> void
        {
            cout << "[DEBUG] Releasing " << cstr << endl;
            env->ReleaseStringUTFChars(jstr, cstr);
        };

    return shared_ptr<const char>(
            env->GetStringUTFChars(jstr, JNI_FALSE),
            deleter );
}

JNIEXPORT jstring JNICALL Java_HelloJNI_addStr (JNIEnv *env, jobject thisObj, jstring arg)
{
    const char *name = env->GetStringUTFChars(arg, NULL);
    //env->ReleaseStringUTFChars(arg, name);            
    jstring result;
    result = env->NewStringUTF(name); 
    env->ReleaseStringUTFChars(arg, name);
    return result;
}

JNIEXPORT int JNICALL Java_HelloJNI_incr(JNIEnv *env, jobject thisObj, jint x, jstring name) {
        const char *s = env->GetStringUTFChars(name, NULL);
        char hostname[HOST_NAME_MAX + 1] = "ARM_";
        strcat(hostname, s);
        int len = strlen(hostname);
        if (x < HOST_NAME_MAX) {
            x = x + 1;
        } else {
	    x = x + len;
	}
        env->ReleaseStringUTFChars(name, s);
        return x;
}


/*
 * Class:     HelloJNI
 * Method:    print
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT jint JNICALL Java_HelloJNI_print (JNIEnv *env, jobject thisObj, jstring arg)
{
	const char *name = env->GetStringUTFChars(arg, NULL);
    char msg[60] = "Hello ";
    jstring result;
    if (strlen(name) > 5) {
    	strcat(msg, name);
    }
    env->ReleaseStringUTFChars(arg, name);            
    result = env->NewStringUTF(msg); 
    return 5;
//DoSayHello(name);
}

//JNIEXPORT int JNICALL Java_HelloJNI_incr (JNIEnv *env, jobject thisObj, jint arg) {
//	return DoIncr(arg);
//}
JNIEXPORT jint JNICALL Java_HelloJNI_checkTriangle(JNIEnv *env, jobject thisObj, jint a, jint b, jint c) {
    // check condition
    if (a + b <= c || a + c <= b || b + c <= a)
        return -1;
    else
        return (a + b + c) ;
}
int DoIncr(const int x) {
	if (x < 0) {
		return -x;
	} else {
		return x+1;
	}
	
}
//Exponentiation by squaring.
int fast_power(int base, int power) {
    int result = 1;
    while (power > 0) {
        if(power % 2 == 1) { // Can also use (power & 1) to make code even faster
            result = (result*base) % MOD;
        }
        base = (base * base) % MOD;
        power = power / 2; // Can also use power >>= 1; to make code even faster
    }
    return result;
}

JNIEXPORT float JNICALL Java_HelloJNI_findSqrt(JNIEnv *env, jobject thisObj, int number) {
			if (number > 0) {
			    return Math.sqrt(number);

			}
			else return -1;
		}

void DoSayHello(const string &name)
{
    cout << "Hello, " << name << endl;
}

//JNIEXPORT jint JNICALL Java_HelloJNI_sendMsg(JNIEnv *env, jobject thisObj, jstring msg) {
//    message = "GET / HTTP/1.1\r\n\r\n";
//    if( send(socket_desc , message , strlen(message) , 0) < 0) {
//    		puts("Send failed");
//    		return 1;
//    	}
//    	puts("Data Send\n");
//}

JNIEXPORT jint JNICALL Java_HelloJNI_connect(JNIEnv *env, jobject thisObj) {
    int socket_desc;
    	struct sockaddr_in server;
    	//Create socket
    	socket_desc = socket(AF_INET , SOCK_STREAM , 0);
    	if (socket_desc == -1) return -1;

    	server.sin_addr.s_addr = inet_addr("74.125.235.20");
    	server.sin_family = AF_INET;
    	server.sin_port = htons( 80 );

    	if (connect(socket_desc , (struct sockaddr *)&server , sizeof(server)) < 0) {
    		//Connect error
    		return 1;
    	}
    	return 0;
}

