#include "HelloJNIImpl.h"

#include <memory>
#include <functional>
#include <iostream>
#include <cstring>
#include <stdlib.h>
#include <unistd.h>
#include <limits.h>
#include <jni.h>
#include <sys/time.h>
#include <string.h>
#include<sys/socket.h>
#include<arpa/inet.h>	//inet_addr
#include <stdint.h>
#include "HelloJNI.h"   // auto-generated by `javah HelloJNI`

#define MOD 1000000007

using std::string;
using std::function;
using std::unique_ptr;
using std::shared_ptr;
using std::cout;
using std::endl;
// Constants are the integer part of the sines of integers (in radians) * 2^32.
const uint32_t k[64] = {
0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee ,
0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501 ,
0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be ,
0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821 ,
0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa ,
0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8 ,
0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed ,
0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a ,
0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c ,
0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70 ,
0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05 ,
0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665 ,
0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039 ,
0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1 ,
0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1 ,
0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391 };

// r specifies the per-round shift amounts
const uint32_t r[] = {7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
                      5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
                      4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
                      6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21};

// leftrotate function definition
#define LEFTROTATE(x, c) (((x) << (c)) | ((x) >> (32 - (c))))


class jstring_deleter
{
    JNIEnv *m_env;
    jstring m_jstr;

public:

    jstring_deleter(JNIEnv *env, jstring jstr)
        : m_env(env)
        , m_jstr(jstr)
    {
    }

    void operator()(const char *cstr)
    {
        cout << "[DEBUG] Releasing " << cstr << endl;
        m_env->ReleaseStringUTFChars(m_jstr, cstr);
    }

};

const string ToString(JNIEnv *env, jstring jstr)
{
    jstring_deleter deleter(env, jstr);     // using a function object
    unique_ptr<const char, jstring_deleter> pcstr(
            env->GetStringUTFChars(jstr, JNI_FALSE),
            deleter );

    return string( pcstr.get() );
}


shared_ptr<const char> ToStringPtr(JNIEnv *env, jstring jstr)
{
    function<void(const char*)> deleter =   // using a lambda
        [env, jstr](const char *cstr) -> void
        {
            cout << "[DEBUG] Releasing " << cstr << endl;
            env->ReleaseStringUTFChars(jstr, cstr);
        };

    return shared_ptr<const char>(
            env->GetStringUTFChars(jstr, JNI_FALSE),
            deleter );
}

JNIEXPORT jstring JNICALL Java_HelloJNI_addStr (JNIEnv *env, jobject thisObj, jstring arg)
{
    const char *name = env->GetStringUTFChars(arg, NULL);
    //env->ReleaseStringUTFChars(arg, name);            
    jstring result;
    result = env->NewStringUTF(name); 
    env->ReleaseStringUTFChars(arg, name);
    return result;
}

JNIEXPORT int JNICALL Java_HelloJNI_incr(JNIEnv *env, jobject thisObj, jint x, jstring name) {
        const char *s = env->GetStringUTFChars(name, NULL);
        char hostname[HOST_NAME_MAX + 1] = "ARM_";
        strcat(hostname, s);
        int len = strlen(hostname);
        if (x < HOST_NAME_MAX) {
            x = x + 1;
        } else {
	    x = x + len;
	}
        env->ReleaseStringUTFChars(name, s);
        return x;
}


/*
 * Class:     HelloJNI
 * Method:    print
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT jint JNICALL Java_HelloJNI_print (JNIEnv *env, jobject thisObj, jstring arg)
{
	const char *name = env->GetStringUTFChars(arg, NULL);
    char msg[60] = "Hello ";
    jstring result;
    if (strlen(name) > 5) {
    	strcat(msg, name);
    }
    env->ReleaseStringUTFChars(arg, name);            
    result = env->NewStringUTF(msg); 
    return 5;
//DoSayHello(name);
}

//JNIEXPORT int JNICALL Java_HelloJNI_incr (JNIEnv *env, jobject thisObj, jint arg) {
//	return DoIncr(arg);
//}

int DoIncr(const int x) {
	if (x < 0) {
		return -x;
	} else {
		return x+1;
	}
	
}
//Exponentiation by squaring.
int fast_power(int base, int power) {
    int result = 1;
    while (power > 0) {
        if(power % 2 == 1) { // Can also use (power & 1) to make code even faster
            result = (result*base) % MOD;
        }
        base = (base * base) % MOD;
        power = power / 2; // Can also use power >>= 1; to make code even faster
    }
    return result;
}

JNIEXPORT jfloat JNICALL Java_HelloJNI_findSqrt(JNIEnv *env, jobject thisObj, jint number) {
			int start = 0, end = number;
			int mid;

			// To store the answer
			float ans = 0;

			// To find integral part of square
			// root of number
			while (start <= end) {
				// Find mid
				mid = (start + end) / 2;

				// If number is perfect square
				// then break
				if (mid * mid == number) {
					ans = mid;
					break;
				}
				// Increment start if integral
				// part lies on right side
				// of the mid
				if (mid * mid < number) {
					//first start value should be added to answer
					ans=start;
					//then start should be changed
					start = mid + 1;
				}
				// Decrement end if integral part
				// lies on the left side of the mid
				else {
					end = mid - 1;
				}
			}
			// To find the fractional part
			// of square root upto 5 decimal
			float increment = (float) 0.1;
			for (int i = 0; i < 5; i++) {
				while (ans * ans <= number) {
					ans += increment;
				}

				// Loop terminates,
				// when ans * ans > number
				ans = ans - increment;
				increment = increment / 10;
			}
			return ans;
		}

void DoSayHello(const string &name)
{
    cout << "Hello, " << name << endl;
}

//JNIEXPORT jint JNICALL Java_HelloJNI_sendMsg(JNIEnv *env, jobject thisObj, jstring msg) {
//    message = "GET / HTTP/1.1\r\n\r\n";
//    if( send(socket_desc , message , strlen(message) , 0) < 0) {
//    		puts("Send failed");
//    		return 1;
//    	}
//    	puts("Data Send\n");
//}

JNIEXPORT jint JNICALL Java_HelloJNI_connect(JNIEnv *env, jobject thisObj) {
    return socket_connect();
}


int socket_connect() {
    int socket_desc;
	struct sockaddr_in server;
	//Create socket
	socket_desc = socket(AF_INET , SOCK_STREAM , 0);
	if (socket_desc == -1) return -1;

	server.sin_addr.s_addr = inet_addr("74.125.235.20");
	server.sin_family = AF_INET;
	server.sin_port = htons( 80 );

	if (connect(socket_desc , (struct sockaddr *)&server , sizeof(server)) < 0) {
		//Connect error
		return 1;
	}
	return 0;
	}